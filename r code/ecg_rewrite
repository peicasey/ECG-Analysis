# libraries
library("data.table")
library("ggpmisc")
library("ggplot2")
library("openxlsx")

# files
ecg1 = as.data.frame(data.table::fread("ECG1.csv"))
ecg2 = as.data.frame(data.table::fread("ECG2.csv"))
ecg1 = ecg1[,-13]


########################################################
# FUNCTIONS #
########################################################
# takes a dataframe of samples and separates them into a list of each sample
# also converts sample data to be numeric
# samples[[1]][[1]] - sample # (ex. '3560')
# samples[[1]][[2]] - sample data
#                     dataframe of two columns
#                     - 'Time (ms)' - 271.6425, 271.7675, 271.8925...
#                     - 'ECG (mV)' - -69.1224, -73.5474, -77.7436...
listSamples = function(df) {
  samples = list()
  g = 1
  for (i in seq(1,ncol(df),2)) {
    j = i + 1
    sample = df[3:nrow(df), i:j]
    colnames(sample) = df[2, i:j]
    sample[c(1,2)] = sapply(sample[c(1, 2)],as.numeric)
    sample_name = df[1, i]
    samples[[g]] = list()
    samples[[g]][[1]] = sample_name
    samples[[g]][[2]] = as.data.frame(sample)
    g = g + 1
  }
  return(samples)
}

getGlobalMaxPeak <- function(peaks) {
  peaks = na.omit(peaks)
  colnames(peaks) = c("time","ecg")
  max_peaks = peaks[with(peaks, order(-ecg)), ]
  return(max_peaks[1, 2])
}

getGlobalMinPeak <- function(peaks) {
  peaks = na.omit(peaks)
  colnames(peaks) = c("time","ecg")
  max_peaks = peaks[with(peaks, order(-ecg)), ]
  return(max_peaks[nrow(peaks), 2])
}

# from ggpmisc2
# returns data.frame of the local maxima from a vector of numerics
find_peaks <-
  function(x,
  ignore_threshold = 0,
  span = 3,
  strict = TRUE,
  na.rm = FALSE) {

  # find peaks
  if(is.null(span)) {
    pks <- x == max(x, na.rm = na.rm)
    if (strict && sum(pks) != 1L) {
      pks <- logical(length(x)) # all FALSE
    }
  } else {
    pks <- splus2R::peaks(x = x, span = span, strict = strict)
  }
  
  # apply threshold to found peaks
  if (abs(ignore_threshold) < 1e-5) {
    pks
  } else {
    range_x <- range(x, na.rm = na.rm, finite = TRUE)
    min_x <- range_x[1]
    max_x <- range_x[2]
    x <- ifelse(!is.finite(x), min_x, x)
    # this can cater for the case when max_x < 0, as with logs
    delta <- max_x - min_x
    top_flag <- ignore_threshold > 0.0
    scaled_threshold <- delta * abs(ignore_threshold)
    if (top_flag) {
      ifelse(x - min_x > scaled_threshold, pks , FALSE)
    } else {
      ifelse(max_x - x > scaled_threshold, pks , FALSE)
    }
  }
}



########################################################
### GETTING THE STABLE WINDOWS USING THE ABOVE METHODS ###
ecg1.samples = listSamples(ecg1)
stdevs = c(60, 55, 20, 55, 20, 40, 20, 20, 55, 40)
# ecg1.peaks = list()
# ecg1.windows = list()

for ()